name: Test

on:
  push:
    branches:
      - main
      - develop*
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
      - develop*
    paths-ignore:
      - '**.md'
  schedule:
    - cron: '0 0 1 * *'

jobs:
  test:
    name: Test latest compiler versions
    if: github.event_name != 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-20.04
          - macos-13
          - macos-12
          - macos-11
          - windows-2022
          - windows-2019
        toolchain:
          - {compiler: gcc, version: 13}
          - {compiler: intel, version: '2023.2'}
          - {compiler: intel-classic, version: '2021.10'}
        exclude:
          # ifx not available for mac
          - os: macos-13
            toolchain: {compiler: intel}
          - os: macos-12
            toolchain: {compiler: intel}
          - os: macos-11
            toolchain: {compiler: intel}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Fortran
        id: setup-fortran
        uses: ./
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: Check compiler version
        if: steps.setup-fortran.outcome == 'success'
        shell: bash
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          if ([ "$RUNNER_OS" == "Windows" ] && [[ "${{ matrix.toolchain.compiler }}" =~ "intel" ]]); then
            # only last line of output captured by command substitution, write to temp file instead
            ${{ env.FC }} //QV > "$RUNNER_TEMP/${{ env.FC }}.ver" 2>&1
            ${{ env.CC }} //QV > "$RUNNER_TEMP/${{ env.CC }}.ver" 2>&1
            ${{ env.CXX }} //QV > "$RUNNER_TEMP/${{ env.CXX }}.ver" 2>&1

            fcv=$(cat "$RUNNER_TEMP/${{ env.FC }}.ver" | head -n 1)
            ccv=$(cat "$RUNNER_TEMP/${{ env.CC }}.ver" | head -n 1)
            cxxv=$(cat "$RUNNER_TEMP/${{ env.CXX }}.ver" | head -n 1)

            fcv=${fcv#*Version }
            fcv=${fcv%% Build*}
            ccv=${ccv#*Version }
            ccv=${ccv%% Build*}
            cxxv=${cxxv#*Version }
            cxxv=${cxxv%% Build*}
          else
            fcv=$(${{ env.FC }} --version | head -n 1)
            ccv=$(${{ env.CC }} --version | head -n 1)
            cxxv=$(${{ env.CXX }} --version | head -n 1)

            fcv=$(echo "$fcv" | grep -woE '[0123456789.]+' | head -n 1)
            ccv=$(echo "$ccv" | grep -woE '[0123456789.]+' | head -n 1)
            cxxv=$(echo "$cxxv" | grep -woE '[0123456789.]+' | head -n 1)
          fi
          
          [[ "$fcv" == ${{ matrix.toolchain.version }}* ]] && (echo "found ${{ env.FC }} version: $fcv") || (echo "unexpected ${{ env.FC }} version: $fcv"; exit 1)
          [[ "$ccv" == ${{ matrix.toolchain.version }}* ]] && (echo "found ${{ env.CC }} version: $ccv") || (echo "unexpected ${{ env.CC }} version: $ccv"; exit 1)
          [[ "$cxxv" == ${{ matrix.toolchain.version }}* ]] && (echo "found ${{ env.CXX }} version: $cxxv") || (echo "unexpected ${{ env.CXX }} version: $cxxv"; exit 1)

      - name: Test compile (bash)
        if: steps.setup-fortran.outcome == 'success'
        shell: bash
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          # macos-13/gfortran 7-9 compatibility workaround
          args=""
          if [ "$RUNNER_OS" == "macOS" ]; then
            if [[ $(sw_vers -productVersion) == 13* ]] && \
                [[ ${{ matrix.toolchain.compiler }} == "gcc" ]] && \
                [[ ${{ matrix.toolchain.version }} =~ ^(7|8|9)$ ]]
            then
              args="-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"
            fi
          fi

          ${{ env.FC }} $args -o hw hw.f90
          output=$(./hw '2>&1')
          [[ "$output" == *"hello world"* ]] && echo "$output" || (echo "Unexpected Fortran program output: $output"; exit 1)
          rm hw

          # gcc/g++ 7-9 broken on macos-13, skip tests
          if [[ $args == "" ]]; then
            ${{ env.CC }} -o hw hw.c
            output=$(./hw '2>&1')
            [[ "$output" == *"hello world"* ]] && echo "$output" || (echo "Unexpected C program output: $output"; exit 1)
            rm hw
          
            ${{ env.CXX }} -o hw hw.cpp
            output=$(./hw '2>&1')
            [[ "$output" == *"hello world"* ]] && echo "$output" || (echo "Unexpected C++ program output: $output"; exit 1)
            rm hw
          fi

      - name: Test compile Fortran (pwsh)
        if: ${{ steps.setup-fortran.outcome == 'success' && runner.os == 'Windows' }}
        shell: pwsh
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          ${{ env.FC }} -o hw.exe hw.f90 
          $output=$(& ".\hw.exe")
          if ($output -match "hello world") {
              write-output $output
          } else {
              write-output "unexpected output: $output"
              exit 1
          }
          rm hw.exe

      - name: Test compile (powershell)
        if: ${{ steps.setup-fortran.outcome == 'success' && runner.os == 'Windows' }}
        shell: powershell
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          ${{ env.FC }} -o hw.exe hw.f90 
          $output=$(& ".\hw.exe")
          if ($output -match "hello world") {
              write-output $output
          } else {
              write-output "unexpected output: $output"
              exit 1
          }
          rm hw.exe

      - name: Test compile (cmd)
        if: ${{ steps.setup-fortran.outcome == 'success' && runner.os == 'Windows' }}
        shell: cmd
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          ${{ env.FC }} -o hw.exe hw.f90 
          for /f "tokens=* usebackq" %%f in (`.\hw.exe`) do @set "OUTPUT=%%f"
          if "%OUTPUT%"=="hello world" (
            echo %OUTPUT%
          ) else (
            echo unexpected output: %OUTPUT%
            exit 1
          )
          del hw.exe

  full_test:
    name: Full compatibility test
    if: github.event_name == 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - ubuntu-20.04
          - macos-13
          - macos-12
          - macos-11
          - windows-2022
          - windows-2019
        toolchain:
          - {compiler: gcc, version: 13}
          - {compiler: gcc, version: 12}
          - {compiler: gcc, version: 11}
          - {compiler: gcc, version: 10}
          - {compiler: gcc, version:  9}
          - {compiler: gcc, version:  8}
          - {compiler: gcc, version:  7}
          - {compiler: gcc, version:  6}
          - {compiler: intel, version: '2023.2'}
          - {compiler: intel, version: '2023.1'}
          - {compiler: intel, version: '2023.0'}
          - {compiler: intel, version: '2022.2.1'}
          - {compiler: intel, version: '2022.2'}
          - {compiler: intel, version: '2022.1'}
          - {compiler: intel, version: '2022.0'}
          - {compiler: intel, version: '2021.4'}
          - {compiler: intel, version: '2021.2'}
          - {compiler: intel, version: '2021.1.2'}
          - {compiler: intel, version: '2021.1'}
          - {compiler: intel-classic, version: '2021.10'}
          - {compiler: intel-classic, version: '2021.9'}
          - {compiler: intel-classic, version: '2021.8'}
          - {compiler: intel-classic, version: '2021.7.1'}
          - {compiler: intel-classic, version: '2021.7'}
          - {compiler: intel-classic, version: '2021.6'}
          - {compiler: intel-classic, version: '2021.5'}
          - {compiler: intel-classic, version: '2021.4'}
          - {compiler: intel-classic, version: '2021.3'}
          - {compiler: intel-classic, version: '2021.2'}
          - {compiler: intel-classic, version: '2021.1.2'}
          - {compiler: intel-classic, version: '2021.1'}
        exclude:
          # ifx not available for mac
          - os: macos-13
            toolchain: {compiler: intel}
          - os: macos-12
            toolchain: {compiler: intel}
          - os: macos-11
            toolchain: {compiler: intel}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Fortran
        continue-on-error: true
        id: setup-fortran
        uses: ./
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: Check compiler version
        if: steps.setup-fortran.outcome == 'success'
        shell: bash
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          if ([ "$RUNNER_OS" == "Windows" ] && [[ "${{ matrix.toolchain.compiler }}" =~ "intel" ]]); then
            # only last line of output captured by command substitution, write to temp file instead
            ${{ env.FC }} //QV > "$RUNNER_TEMP/${{ env.FC }}.ver" 2>&1
            ${{ env.CC }} //QV > "$RUNNER_TEMP/${{ env.CC }}.ver" 2>&1
            ${{ env.CXX }} //QV > "$RUNNER_TEMP/${{ env.CXX }}.ver" 2>&1

            fcv=$(cat "$RUNNER_TEMP/${{ env.FC }}.ver" | head -n 1)
            ccv=$(cat "$RUNNER_TEMP/${{ env.CC }}.ver" | head -n 1)
            cxxv=$(cat "$RUNNER_TEMP/${{ env.CXX }}.ver" | head -n 1)

            fcv=${fcv#*Version }
            fcv=${fcv%% Build*}
            ccv=${ccv#*Version }
            ccv=${ccv%% Build*}
            cxxv=${cxxv#*Version }
            cxxv=${cxxv%% Build*}
          else
            fcv=$(${{ env.FC }} --version | head -n 1)
            ccv=$(${{ env.CC }} --version | head -n 1)
            cxxv=$(${{ env.CXX }} --version | head -n 1)

            fcv=$(echo "$fcv" | grep -woE '[0123456789.]+' | head -n 1)
            ccv=$(echo "$ccv" | grep -woE '[0123456789.]+' | head -n 1)
            cxxv=$(echo "$cxxv" | grep -woE '[0123456789.]+' | head -n 1)
          fi
          
          [[ "$fcv" == ${{ matrix.toolchain.version }}* ]] && (echo "found ${{ env.FC }} version: $fcv") || (echo "unexpected ${{ env.FC }} version: $fcv"; exit 1)
          [[ "$ccv" == ${{ matrix.toolchain.version }}* ]] && (echo "found ${{ env.CC }} version: $ccv") || (echo "unexpected ${{ env.CC }} version: $ccv"; exit 1)
          [[ "$cxxv" == ${{ matrix.toolchain.version }}* ]] && (echo "found ${{ env.CXX }} version: $cxxv") || (echo "unexpected ${{ env.CXX }} version: $cxxv"; exit 1)

      - name: Test compile (bash)
        if: steps.setup-fortran.outcome == 'success'
        shell: bash
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          # macos-13/gfortran 7-9 compatibility workaround
          args=""
          if [ "$RUNNER_OS" == "macOS" ]; then
            if [[ $(sw_vers -productVersion) == 13* ]] && \
               [[ ${{ matrix.toolchain.compiler }} == "gcc" ]] && \
               [[ ${{ matrix.toolchain.version }} =~ ^(7|8|9)$ ]]
            then
              args="-L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib"
            fi
          fi

          ${{ env.FC }} $args -o hw hw.f90
          output=$(./hw '2>&1')
          [[ "$output" == *"hello world"* ]] && echo "$output" || (echo "Unexpected Fortran program output: $output"; exit 1)
          rm hw

          # gcc/g++ 7-9 broken on macos-13, skip tests
          if [[ $args == "" ]]; then
            ${{ env.CC }} -o hw hw.c
            output=$(./hw '2>&1')
            [[ "$output" == *"hello world"* ]] && echo "$output" || (echo "Unexpected C program output: $output"; exit 1)
            rm hw
          
            ${{ env.CXX }} -o hw hw.cpp
            output=$(./hw '2>&1')
            [[ "$output" == *"hello world"* ]] && echo "$output" || (echo "Unexpected C++ program output: $output"; exit 1)
            rm hw
          fi

      - name: Test compile Fortran (pwsh)
        if: ${{ steps.setup-fortran.outcome == 'success' && runner.os == 'Windows' }}
        shell: pwsh
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          ${{ env.FC }} -o hw.exe hw.f90 
          $output=$(& ".\hw.exe")
          if ($output -match "hello world") {
              write-output $output
          } else {
              write-output "unexpected output: $output"
              exit 1
          }
          rm hw.exe

      - name: Test compile (powershell)
        if: ${{ steps.setup-fortran.outcome == 'success' && runner.os == 'Windows' }}
        shell: powershell
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          ${{ env.FC }} -o hw.exe hw.f90 
          $output=$(& ".\hw.exe")
          if ($output -match "hello world") {
              write-output $output
          } else {
              write-output "unexpected output: $output"
              exit 1
          }
          rm hw.exe

      - name: Test compile (cmd)
        if: ${{ steps.setup-fortran.outcome == 'success' && runner.os == 'Windows' }}
        shell: cmd
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
          CXX: ${{ steps.setup-fortran.outputs.cxx }}
        run: |
          ${{ env.FC }} -o hw.exe hw.f90 
          for /f "tokens=* usebackq" %%f in (`.\hw.exe`) do @set "OUTPUT=%%f"
          if "%OUTPUT%"=="hello world" (
            echo %OUTPUT%
          ) else (
            echo unexpected output: %OUTPUT%
            exit 1
          )
          del hw.exe

      - name: Create compatibility report
        shell: bash
        run: |
          if [[ "${{ steps.setup-fortran.outcome }}" == "success" ]]; then
            support="&check;"
          else
            support=""
          fi
          
          mkdir compat
          prefix="${{ matrix.os }},${{ matrix.toolchain.compiler }},${{ matrix.toolchain.version }}"
          echo "$prefix,$support" >> "compat/${prefix//,/_}.csv"

      - name: Upload compatibility report
        uses: actions/upload-artifact@v3
        with:
          name: compat
          path: compat/*.csv

  compat:
    name: Report compatibility
    if: github.event_name == 'schedule'
    needs: full_test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install packages
        run: pip install tabulate pandas

      - name: Download reports
        uses: actions/download-artifact@v3
        with:
          name: compat
          path: compat

      - name: Concatenate reports
        run: |
          echo "runner,compiler,version,support" > long_compat.csv
          cat compat/*.csv >> long_compat.csv

      - name: Make wide CSV and MD table
        run: python wide_compat_reports.py "long_compat.csv" "compat.csv"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compat
          path: |
            compat.csv
            compat.md

      - name: Check for changes
        id: diff
        run: |
          if ! [ -f compat.csv ]; then
            echo "diff=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          diff=$(git diff compat.csv)
          if [[ $diff == "" ]]; then
            echo "No changes found"
            echo "diff=false" >> $GITHUB_OUTPUT
          else
            echo "Changes found:"
            echo "$diff"
            echo "diff=true" >> $GITHUB_OUTPUT
          fi

      - name: Update README
        if: ${{ steps.diff.outputs.diff == 'true' && github.event_name == 'push' }}
        run: python update_compat_table.py "compat.md" "README.md"

      - name: Print README diff
        if: ${{ steps.diff.outputs.diff == 'true' && github.event_name == 'push' }}
        run: git diff README.md

      - name: Create pull request
        if: ${{ steps.diff.outputs.diff == 'true' && github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          now=$(date +'%Y-%m-%dT%H-%M-%S')
          updated_branch="compat_$now"
          default_branch="${{ github.event.repository.default_branch }}"
          
          git switch -c "$updated_branch"
          git add compat.csv README.md
          git commit -m "Update compatibility matrix"
          git push -u origin "$updated_branch"
          gh pr create -B "$default_branch" -H "$updated_branch" --title "Update compatibility matrix" --body-file compat.md
